<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Quantitative Software Engineering by Richard Imaoka</title>
    <link>http://richard-imaoka.github.io</link>
    <description>Quantitative Software Engineering info website created by Richard Imaoka, a professional programmer and an ameteura Quant. </description>
    <atom:link href="http://richard-imaoka.github.io/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Software as a complex derivative contract</title>
      <description><![CDATA[
<h2>Arbitrage relationship on a Futures contract</h2>
<p>
  The below video by Investtools (from Ameritrade) gives quick illustration of what futures contract is.
</p>
<div class="video-container">
  <iframe width="560" height="315" src="https://www.youtube.com/embed/Yqkq-w4Jl3c?rel=0" frameborder="0" allowfullscreen></iframe>
</div>

<p>
  Once you understood what futures is, then let's think about its arbitrage relationship and how you derive the right price using arbitrage.
  Assume there is an oil futures contract in a Financial market, and its currently traded at $1,100 for 3-month delivery.
  So if you
  <ul>
    <li>Sell the futures contract, you will sell the oil at $1,100 3 months later</li>
    <li>Buy the futures contract, you will buy the oil at $1,100 3 months later</li>
  </ul>
</p>

<p>
  To form up arbitraging trades, you can start selling the futures contract as in the below Fig. 1.
  Note that from the futures contract, <strong>no money, or oil exchange happens today</strong>.
</p>

<figure>
  <figcaption>
    <span style="font-size: 20px"><strong>Fig 1. Selling Futures contract</strong></span>
  </figcaption>
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/arbitrage-software-derivative-futures.png">
  <figcaption>
    <a href="http://www.freedigitalphotos.net/images/Manufacturing_and_in_g199-Barrel_p11860.html">(Image by Suat Eman at FreeDigitalPhotos.net)</a>
  </figcaption>
</figure>

<p>
  At the same time, you can buy the oil, which is currently traded at $1,000. Buying oil is an immediate trade,
  so you pay $1,000 and get the oil. However, you need to store oil somewhere, that will incur strage cost.
</p>

<figure>
  <figcaption>
    <span style="font-size: 20px"><strong>Fig 2. Buying Oil</strong></span>
  </figcaption>
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/arbitrage-software-derivative-underlier.png">
  <figcaption><a href="http://www.freedigitalphotos.net/images/Manufacturing_and_in_g199-Barrel_p11860.html">Image by Suat Eman at FreeDigitalPhotos.net</a></figcaption>
</figure>

<p>
  Also, you borrow money from a bank to support the buy of the oil. When you return back money, you will be charged $50 extra.
</p>

<figure>
  <figcaption>
    <span style="font-size: 20px"><strong>Fig 3. Borrowing money to buy oil</strong></span>
  </figcaption>
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/arbitrage-software-derivative-borrow.png">
  <figcaption><a href="http://www.freedigitalphotos.net/images/Manufacturing_and_in_g199-Barrel_p11860.html">Image by Suat Eman at FreeDigitalPhotos.ne</a></figcaption>
</figure>

<p>
  If you look at the above 3 figures, you will notice that you buy oil today and sell it 3 months later. So you will end up in no oil holding 3 months later.
  So you just need to think about what cash difference you end up, to calculate the profit. Then,
</p>

<p style="font-size:14px; text-align: center">
  <strong> Buying Oil today (- $1,000) + Borrowing $1,000 - Storage Cost ($50) - Return Borrowing ($1,050) + Selling Oil in 3 months (+ $1,100 ) = zero </strong>
</p>

<p>
  This means that the oil futures price = $1,100 is <strong>correctly priced from arbitrage</strong> perspective.
  If we talk about such a simple Financial derivative, arbitrage pricing is as simple as this. However, what about more complicated derivatives?
</p>

<h2>Arbitrage relationship on PRDC, a very complex derivative</h2>

<p>
  PRDC, Power-Reverse Dual Currency trade is a very complicated instrument as follows. You can look at the linked Wikipedia Document, and see there are
  lot of components forming up this derivative transaction.
</p>

<figure>
  <a href="https://en.wikipedia.org/wiki/Power_reverse_dual-currency_note"><img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/Derivatives_PRDC.png"></a>
  <figcaption>
    <a href="https://en.wikipedia.org/wiki/Power_reverse_dual-currency_note">PRDC structure by Wikipedia</a>
  </figcaption>
</figure>

<p>
  To construct an arbitrage pricing argument, you need to de-compose the complex derivative and apply the arbitrage pricing argument for each of
  the de-coupled components. However, as given on the Wikipedia page, it is practically impossible to construct perfect (or even nearly-perfect)
  arbitrage positions for PRDC.
</p>

<h2>De-compose Software, for arbitrage pricing discussion</h2>

<p>
  The PRDC situation is a  similar to software. To correctly price software, you can firstly de-compose it into smaller pieces,
  and apply arbitrage pricing method to calculate each component's fair price.
</p>

<p>
  The difficulty is coming from the fact that, like PRDC, it is practically <strong>impossible</strong> to find out <strong>complete replacement or alternative</strong> to any software component, even if you divide it up to
  as small pieces as you can. That is why I treated software as <strong>complex derivative</strong>, like PRDC.
</p>

<p>
  Anyway, we still need to de-compose software for arbitrage pricing, so let's assume there is a simple 2-tier web application software like below.
  You have a web server, and its backend database.
</p>

<figure>
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/arbitrage-software-derivative-2-tier.png"></a>
  <figcaption>
    <a href="https://en.wikipedia.org/wiki/Power_reverse_dual-currency_note">PRDC structure by Wikipedia</a>
  </figcaption>
</figure>

<p>
  By de-composing it and looking into the database piece, you can calculate the cost contributions as follows:
</p>
<ul>
  <li>Database License fee</li>
  <li>Pay to Database Support Person</li>
</ul>
<p>
  As the database itself does not generate revenue at all, we can only think about its cost.
</p>

<p>
  Then we think about arbitrage - what would be the <strong>replacement</strong> and <strong>switching cost</strong>?
  Maybe, if you have the database license fee, you might want to use open source databsae software like MySQL or Postgress.
  Then there will be learning curve for the database support, and especially in the initial period after replacement you will see a higher number of issues than usual.
</p>

<p>
  If the reduced database license fee, and reduced support person's workload (if possible) is worth the switching cost (increase in issues, supposedly short-term, development cost, etc),
  it is an arbitrage trade, but as said above, this is not perfect arbitrage as you have uncertainty that actual cost would increase.
</p>

<p>
  We will dig in further into this software pricing method in other articles.
</p>]]></description>
      <pubDate>Thu Jan 28 2016 10:23:05 GMT+0900 (Tokyo Standard Time)</pubDate>
      <link>http://richard-imaoka.github.io/posts/arbitrage-software-complex-derivative-2</link>
      <guid isPermaLink="true">http://richard-imaoka.github.io/posts/arbitrage-software-complex-derivative-2</guid>
    </item>
    
    
    <item>
      <title>Software as a complex derivative contract</title>
      <description><![CDATA[
<figure>
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/arbitrage-software-complex-derivative2.png">
  <figcaption>
    Images by <a href="http://www.freedigitalphotos.net/images/Money_g61-Stacked_US_Dollar_p66613.html">sheelamohan</a>
    and <a href="http://www.freedigitalphotos.net/images/interconnected-network-structure-shows-networking-photo-p206671">Stuart Miles</a>
    at FreeDigitalPhotos.net
  </figcaption>
</figure>

<h2>Incoming Cash Flow of Software = Revenue</h2>

<p>
  To analyze software as a complex derivative, you need to decompose its cash flow structure.
  Firstly let's look at its incoming cash flow, which is revenues generated from software (in a more strict sense, revenues from the business dependent on the software).
</p>

<figure>
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/arbitrage-software-derivative-unpredictable-revenues.png">
  <figcaption><a href="http://www.freedigitalphotos.net/images/businessman-pushing-tactile-button-photo-p310733">Image by stockimages at FreeDigitalPhotos.net</a></figcaption>
</figure>

<p>
  It is almost always impossible to predict the exact revenues from the software, as you cannot tell what happens in the future,
  future revenue has probabilistic nature.
</p>

<p>
  To make further analysis, in later articles, it is important to take this probabilistic, uncertain nature of future cash flow into account.
</p>

<h2>What if the software doesn't generate revenue at all?</h2>

<p>
  There are cases where your software does not generate revenue at all. Even in such cases, you still pay maintenance cost for the software.
  Examples of such software is backend database or data layer, middle tier like messaging layer, or maybe internal books and record system for accounting.
</p>

<p>
  In other articles, I will discuss how to make investment, const analysis on such software, but basic techniques are:
  <ul>
    <li>Just focus on the cost components of the software</li>
    <li>Or, think about the entire "system"</li>
      <ul>
        <li>and treat these as "part" of the whole revenue-generating system</li>
      </ul>
  </ul>
</p>

<h2>Outgoing Cash Flow of Software = Maintenance Cost</h2>

<p>
  The outgoing cash flow of software is maintenance cost in general.
  And the large part of the maintenance cost is the pay to the developers and support people of the software.

  Software metrics, for example as follows, help you to determine the cost break-down structure of software.
</p>

<ul>
  <li>Frequency of troubles</li>
  <li>Average time to trouble resolution</li>
  <li>Build Frequency</li>
  <li>Average build manual work load</li>
</ul>

<p>
  As discussed in the below two articles, people's desktop app usage metrics can be a very useful metric.
</p>
<ul>
  <li>Desktop app usage metrics... (e.g. RescueTime)</li>
</ul>

<p>
  <a href="pricing-and-accounting-software-expenses-time-tracking.html">Pricing and Accounting Software - Expenses, Time-Tracking for Maintenance Cost Calculation</a>
  <a href="pricing-and-accounting-software-expenses-rescuetime.html">Pricing and Accounting Software - Expenses, Time-Tracking with RescueTime</a>
</p>

<p>
  Once you collected necessary software metrics, then you need to determine and calculate the cost associated to the software.
</p>

<figure>
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/arbitrage-software-derivative-unpredictable-cost.png">
  <figcaption><a href="http://www.freedigitalphotos.net/images/Business_people_g201-Worried_Businessman_With_Pc_p67341.html">Image by David Castillo Dominici at FreeDigitalPhotos.net</a></figcaption>
</figure>

]]></description>
      <pubDate>Thu Jan 28 2016 10:23:05 GMT+0900 (Tokyo Standard Time)</pubDate>
      <link>http://richard-imaoka.github.io/posts/arbitrage-software-complex-derivative-1</link>
      <guid isPermaLink="true">http://richard-imaoka.github.io/posts/arbitrage-software-complex-derivative-1</guid>
    </item>
    
    
    <item>
      <title>Pricing Software in Financial Arbitrage Context - Forms of selling software</title>
      <description><![CDATA[<h2>Selling software is nearly impossible</h2>

<p>
  As in <a href="arbitrage-software-intro.html">Pricing Software in Financial Arbitrage Context - Intro</a>,
  you cannot sell your software other than the below M&A case where you ser selling your entire company.

  This makes it very hard to construct an arbitrage argument.
</p>

<h2>Selling the company - the only pure form of sell</h2>
<figure>
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/arbitrage-buying-m_and_a.png">
</figure>
<p>
  This is the only pure for of selling, although you are not selling the software only but the entire business, company.
</p>

<h2>Retire the software</h2>
<figure>
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/arbitrage-selling-retire.png">
  <figcaption>
    Image by <a href="http://www.freedigitalphotos.net/images/Construction_g265-Pull_Down_Constuction_p56850.html">Surachai</a> at FreeDigitalPhotos.net
  </figcaption>
</figure>
<p>
  For some cases, you probably want to just stop using and maintaining your software.
  When you are retiring the software, you can assume you are <strong>selling it at zero</strong> price, and getting rid of maintenance and investment.
  Of course revenues generated from the software will also be gone.
</p>

<p>
  Chances are like you stop doing unprofitable business, and then the underlying software is no longer needed.

  You might make this retirement decision when maintenance cost is higher than the revenue it generates.
</p>


<h2>Replace the software you are using, with a new one</h2>
<figure>
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/arbitrage-selling-replace.png">
  <figcaption>
    Images by <a href="http://www.freedigitalphotos.net/images/abandoned-old-house-photo-p290063">Witthaya Phonsawat</a>
    and <a href="http://www.freedigitalphotos.net/images/exterior-shot-of-a-glass-building-photo-p258343">stockimages</a>
    at FreeDigitalPhotos.net
  </figcaption>
</figure>

<p>
  A more common case than pure retirement is replacing the current software with a newly built one.
  Possibly you are only replacing part of your entire software system, like replacing the middleware layer for better scalability etc.
</p>

<p>
  This is actually a difficult investment decision, than most people think of.
  The new software does not generate any revenue during the development phase, until it actually replaces the old one.
  Also once the new software runs in production, it has much higher possibility of unknown bugs and issues.
</p>

<h2>Special case - set up a competitor company</h2>
<p>
  This is a special case which you are not actually selling software even at the zero price.
</p>

<p>
  When you notice a certain company, has a very high maintenance cost in their software,
  you can set up a new company running a competing service with them.

  Supposedly you have much lower maintenance cost in your own software, so that you can
  provide more attractive prices offering the similar service.
</p>

<figure>
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/arbitrage-selling-setup-competitor.png">
  <figcaption>
    Image by <a href="http://www.freedigitalphotos.net/images/cloud-service-photo-p389883">zirconicusso</a> at FreeDigitalPhotos.net
  </figcaption>
</figure>

<p>
  From the selling and buying discussion perspective, it is 1) buying (investing in) your own software which is similar to the rival company,
  2) and then take take the revenue out of your rival.
</p>

<p>
  So, you are not actually selling anything, but taking advantage of mis-priced (too high maintenance cost) of the software your rival had.
</p>]]></description>
      <pubDate>Thu Jan 28 2016 10:23:05 GMT+0900 (Tokyo Standard Time)</pubDate>
      <link>http://richard-imaoka.github.io/posts/arbitrage-software-selling</link>
      <guid isPermaLink="true">http://richard-imaoka.github.io/posts/arbitrage-software-selling</guid>
    </item>
    
    
    <item>
      <title>Pricing Software in Financial Arbitrage Context - Forms of buying software</title>
      <description><![CDATA[<h2>Buying a software package</h2>
<figure>
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/arbitrage-buying-package.png">
</figure>
<p>
  If you can find a software package that perfectly fits your needs, you can buy and install it to run your business.
  This is common for utility programs like office suite, or non-core business applications like ledger software.
  However, for core business software and applications, usually you cannot just buy a 3rd party package.
</p>

<h2>Buying a company as a whole - M&A</h2>
<figure>
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/arbitrage-buying-m_and_a.png">
</figure>

<p>
  As discussed in the previous article <a href="arbitrage-software-intro.html">Pricing Software in Financial Arbitrage Context - Intro</a>,
  when you are buying software which was built and used internally in another company, you will most likely need to buy the whole company.
</p>

<figure>
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/arbitrage-you-buy-everything.png">
  <figcaption>
    Image by <a href="http://www.freedigitalphotos.net/images/cloud-service-photo-p389883">zirconicusso</a> at FreeDigitalPhotos.net
  </figcaption>
</figure>

<h2>Invest in a software project</h2>
<figure>
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/arbitrage-buying-build.png">
</figure>

<p>
  This is a very time consuming approach. However, still most of core-business software in many companies are built internally,
  as it needs to satisfy their own needs.
</p>

<p>
  Today, even if you decide to create your software from scratch, you don't really do it from the ground up.
  Most likely you take advantage of Open Source Software, OSS. For example, you might build up front-end user interface in
  web applications in React or Angular JS. Then on the backend, you might use MySQL for data storage, Chef for infrastructure management, etc.
</p>

<figure>
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/arbitrage-buying-oss.png">
</figure>

<h2>Outsource software development</h2>

<p>
  This approach is similar to the above "Invest in a software project" approach. There are a different ways to develop software
  outsourcing the resources. You can ask everything to a system vendor to develop software for you, partially leverage vendors for
  some part of your system, or employ vendor developers as consultants for a given period of time, etc.
</p>

<h2>Cloud Subscription</h2>
<figure>
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/arbitrage-buying-cloud.png">
  <figcaption>
    Images by <a href="http://www.freedigitalphotos.net/images/businessman-pushing-tactile-button-photo-p310733">stockimages</a>
    and <a href="http://www.freedigitalphotos.net/images/Teamwork_g404-Standing_People_p25253.html">renjith krishnan</a>
    at FreeDigitalPhotos.net
  </figcaption>
</figure>

<p>
  This is becoming more and more popular and important option recently. Due to explosive rise of cloud-based services,
  even for core businesses, companies started integration with cloud-based services offered by 3rd parties.
  Usually, companies build internal systems which talk to 3rd party cloud-based services via APIs, or use
  web-based user interface or client application to access the services.
</p>

<p>
  A commonly used example is GitHub. Companies often set up repositories there, and use its web pages to make pull requests,
  manage issues, etc. Also GitHub's WebHook can call other services, even other cloud services like CircleCI or Jenkins build processes
  to automate the software build procedure.
</p>]]></description>
      <pubDate>Thu Jan 28 2016 10:23:05 GMT+0900 (Tokyo Standard Time)</pubDate>
      <link>http://richard-imaoka.github.io/posts/arbitrage-software-buying</link>
      <guid isPermaLink="true">http://richard-imaoka.github.io/posts/arbitrage-software-buying</guid>
    </item>
    
    
    <item>
      <title>Pricing Software in Financial Arbitrage Context - Intro</title>
      <description><![CDATA[<h2>Financial Arbitrage, when the same product is in different prices</h2>
<p>
  What is arbitrage in finance? It is a trading method, to make a profit from the difference in prices, on the same product.
  The following video by Khan Academy gives good basics of arbitrage.
</p>

<div class="video-container">
  <iframe width="560" height="315" src="https://www.youtube.com/embed/AuCH7fHZsZ4?rel=0" frameborder="0" allowfullscreen></iframe>
</div>

<p>
  Usually it is very rare that there is a pure arbitrage opportunity. (i.e.) same exact products are traded in two different prices.
  Most of the time, there is no such case, or there is too little price difference
  so that your arbitrage profit would be diminished by tax and trading cost.
</p>

<p>
  If you have an arbitrage opportunity on a certain product, as in the video, the price difference will converge to a point where there is no more arbitrage ooportunity.
  In other  words, you can say:
  <ul>
    <li>if you see an arbitrage opportunity, the product is <strong>wrongly priced</strong></li>
    <li>the <strong>correct</strong> price of the product is so that there is <strong>no arbitrage</strong> opportunity</li>
  </ul>
</p>

<h2>For software, you cannot easily sell or buy it</h2>
<p>
  To expand the same arbitrage-based pricing discussion to software, there is actually a big problem - you cannot easily sell or buy software.
  As in a previous article, <a href="pricing-and-accounting-software-asset.html">"Pricing and Accounting Software - Asset"</a>,
  you can buy software easily, only when the software is packaged.
</p>

<figure>
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/arbitrage-youcant-sell.png">
  <figcaption><a href="http://www.freedigitalphotos.net/images/businessman-pushing-tactile-button-photo-p310733">Image by stockimages at FreeDigitalPhotos.net</a></figcaption>
</figure>

<p>
  For example, when an external investor comes in, and he is interested in your precious e-Commerse software, "e-Sale".
  Does he just buy the software only? No he doesn't. Just buying software doesn't do anything - the investor actually
  wants to acquire the entire e-Commerce business, including people supporting the software and the business.
</p>

<figure>
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/arbitrage-you-buy-everything.png">
  <figcaption>
    Images by <a href="http://www.freedigitalphotos.net/images/businessman-pushing-tactile-button-photo-p310733">stockimages</a>
    and <a href="http://www.freedigitalphotos.net/images/Teamwork_g404-Standing_People_p25253.html">renjith krishnan</a>
    at FreeDigitalPhotos.net
  </figcaption>
</figure>

<p>
You know that is what happens in actual tech businesses. It's M&A where known cases are like:
<ul>
  <li>Google bought youtube</li>
  <li>Microsoft bought Dropbox</li>
  <li>...etc, </li>
</ul>
They just didn't buy software only, but they bought the entire businesses and the people, to keep running the same service after the mergers.
</p>

<p>
  So unlike financial markets, even if a software product is wrongly priced, it is not easy to take advantage of the arbitrage opportunity.
  This results in a prevalent situation in the software industry, so that most software product is wrongly priced,
  since arbitrage dynamics to correct prices does not work.
</p>

<h2>Pricing Software, by assuming it as a complex Financial Derivative contract</h2>

<figure>
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/arbitrage-software-complex-derivative2.png">
  <figcaption>
    Images by <a href="http://www.freedigitalphotos.net/images/Money_g61-Stacked_US_Dollar_p66613.html">sheelamohan</a>
    and <a href="http://www.freedigitalphotos.net/images/interconnected-network-structure-shows-networking-photo-p206671">Stuart Miles</a>
    at FreeDigitalPhotos.net
  </figcaption>
</figure>

<p>
  As discussed, we cannot just buy or sell software easily. Thus, you don't know the exact price of software.
</p>

<p>
  So, pricing software is just an exercise bound to failure? Not actually, to price software, you can assume it as a <strong>complex derivative contract</strong>,
  and de-compose it into cash flows it consists of.

  <ul>
    <li>Incoming cash flows = Revenue</li>
    <li>Outgoing cash flows = Cost</li>
  </ul>
</p>

<p>
  Put simply,
</p>

<p style="font-size:14px; text-align: center">
  <strong>Software Value = Revenue - Cost = Net cash flow</strong>
</p>

<p>
  However, it is much more difficult than it might look like - the reasons why I said it is a "complex" derivative are because:
  <ul>
    <li>Revenues are unknown in advance,</li>
    <li>Maintenance cost is also unknown in advance</li>
  </ul>
  Also, even if revenues and maintenance cost are "known" when they became past-dated, it is hard to tell what percentage of them is from software's contribution.
  You can see the below articles about more discussion.
  <ul>
    <li><a href="pricing-and-accounting-software-income.html">Pricing and Accounting Software - Income</a></li>
    <li><a href="pricing-and-accounting-software-expenses.html">Pricing and Accounting Software - Expenses</a></li>
  </ul>
</p>

<p>
  In future articles, we model software as a complex derivative contract with unknown cash flows,
  and we will see how that enables the arbitrage argument to give a price of software.
</p>]]></description>
      <pubDate>Thu Jan 28 2016 10:23:05 GMT+0900 (Tokyo Standard Time)</pubDate>
      <link>http://richard-imaoka.github.io/posts/arbitrage-software-intro</link>
      <guid isPermaLink="true">http://richard-imaoka.github.io/posts/arbitrage-software-intro</guid>
    </item>
    
    
    <item>
      <title>Software Engineering, complemented by Financial Engineering for quantitative analysis, business decisions</title>
      <description><![CDATA[
<h2>Software Engineering has been successful in creating great software products</h2>
<p>
  Like you can see many people signed up for "<a href="http://manifesto.softwarecraftsmanship.org/">Software Craftsmanship Manifesto</a>",
  programmers are self-driven, serious people, willing to make the world better with technologies.
  Thus there has always been tremendous innovations in the software industry.
</p>

<p>
  For example, I am always impressed by the fast paced development of web front-end frameworks and libraries,
  which people usually say "trends change every half a year". Web front-end programmers are doing pretty good job
  trying to resolve problems which many other people face, in this rapid moving environment.
  <figure>
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/wordcloud.svg">
  </figure>
</p>

<p>
  Not only about software itself, also there has been a lot of effort in <strong>software development processes</strong>.
  Best practices are shared and publicized, and modern development environment has automated test with good coverage,
  strict but active code review process, issues and enhancement requests are tracked in one place, building process is becoming more and more automated.

  <figure>
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/wordcloud2.svg">
  </figure>
</p>

<h2>Most software projects still fail today</h2>
<p>
  OK, so now programmers know <strong>how</strong> to create great software,
  is it getting easier to make software projects successful?
</p>
<p>
  The answer is sadly no. Still, <strong>most of software projects fail</strong>, or at their best, deliver software with poor quality.
  You can see the <a href="#references">references</a> about failed projects.
</p>

<h2>Software Engineering has been "Craftsmaship" rather than Science</h2>
<p>
  Did those projects fail because the programmers and project managers were not skilled enough?
  That is true to some extent.
</p>

<p>
  However, this Craftsmanship mind, focusing on right use of <strong>technologies</strong> and <strong>methodologies</strong> lacks a significantly important point.
  There is harsh truth:
</p>

<p style="font-size: 24px; text-align: center">
  Projects still fail, no matter how skilled programmer you are.
</p>

<p>
  Do you think top level programmers, with excellent project managers, will make every project successful?
  Certain percentage of projects will fail even though you hire the best people.
  Creating and maintaining Software is now truly a business, and there is no single business you know it will succeed, no matter how skilled people you have.
  And what's more, in real world, that is just impossible to hire the best people. Every company lacks well skilled developers, well skilled project managers, but they still need to do their business.
</p>

<p>
  Software Craftsmanship - building up on Software Engineering skills is very <stron>important</stron>, but it is only one side of the story.
  You also need to learn about how to make sound business judgement, as you cannot always expect
  top level programmers to work for your company.
</p>

<h2>Financial Engineering for quantitative analysis, and sound business judgement under uncertainty</h2>
<p>
  There are important questions like below, traditional Software Engineering didn't answer:
  <ul>
    <li>Does this new technology saves us money, or actually we <strong>lose</strong> money?</li>
    <li>How <strong>likely</strong> does my project get extended?</li>
    <li>Two good technologies - which <strong>fits</strong> us better?</li>
    <li>Replacing a <strong>legacy</strong> system, or invest in something else?</li>
    <li><strong>Total</strong> cost of software project ... including maintenance cost</li>
  </ul>

  These questions could be answered if you have adequate expertise on subject technologies and methodologies.
  If you are a Object Oriented Programming expert, you know what benefits it brings to your company. However, at the same time,
  are you also a Functional Programming expert? What if project managers think Functional styles would bring certain benefit but they are not sure if they are willing to invest in it?
  You need to answer to such questions in real world, <strong>without having time</strong> to learn about everything.
</p>

  <figure>
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/software-engineering-2.png">
  </figure>

<p>
  Financial Engineering frameworks are exactly built to meet such a situation - you don't know what happens in the future,
  but you still make investment decisions. Financial Engineering enhances Software Engineering especially in the following aspects:
  <ul>
    <li><strong>Quantitative</strong> analysis of software development cost and maintenance cost</li>
    <li><strong>Probabilistic</strong> frameworks to make business decisions, under uncertainty</li>
  </ul>

  I am excited to introduce methodologies, and more excited to hear about suggestions and critiques from others, to build this framework better and more robust!
</p>
]]></description>
      <pubDate>Thu Jan 28 2016 10:23:05 GMT+0900 (Tokyo Standard Time)</pubDate>
      <link>http://richard-imaoka.github.io/posts/software-engineering-craftmanship-vs-quantitative-analysis</link>
      <guid isPermaLink="true">http://richard-imaoka.github.io/posts/software-engineering-craftmanship-vs-quantitative-analysis</guid>
    </item>
    
    
    <item>
      <title>Introducing Springer's Journals of Systems and Software</title>
      <description><![CDATA[<h2>Journal of Systems and Software, Springer's academic journal for software engineering</h2>

<p>
  <a href="http://www.journals.elsevier.com/journal-of-systems-and-software">Journal of Systems and Software</a> provides you state of the art researches in software engineering,
  including but not only limited to below:
  <ul>
    <li>Methods and tools for, and empirical studies on, software requirements, design, architecture, verification and validation, maintenance and evolution</li>
    <li>Agile, model-driven, service-oriented, open source and global software development</li>
    <li>Human factors and management concerns of software development</li>
    <li>Metrics and evaluation, data mining of software development resources</li>
    <li>Business and economic aspects of software development processes</li>
  </ul>

  where a <a href="http://www.sciencedirect.com/science/journal/01641212">sample issue</a> looks like this.
  One article I reviewed before,
</p>

<h2>Software Engineering is really worth studying?</h2>
<p>
  By saying Software Engineering, I am only talking about the stuff like project and software management, cost analysis, systems development processes.
</p>

<p>
  Some people are skeptical about the value of Software Engineering for such matters.
  Even a famous computer scientist <a href="https://www.quora.com/Do-you-agree-with-Edsger-Dijkstras-opinion-of-Software-Engineering-and-why">Edsger Dijkstra criticized Software Engineering</a> back in 1980s.
</p>

<p>
  It is true that Software Engineering doesn't have as strict and robust models as other engineering like Mechanical Engineering.
  Since software is created as a result of human activities, sometimes from hundreds of people, it is <strong>impossible</strong> to give a robust mathematical model to describe the dynamics.
</p>

<p>
  Rather, I would think Software Engineering as a <strong>Social Science</strong> field.
  You cannot apply the same mathematical model to every single problem.
  However, still empirical studies give you probabilistic and statistical sense on how the software development and maintenance would go.
  Also studies like Psychology and Game Theories would give explanation about behavior and motivation of your programmer colleagues.
  And finally Economic and Financial studies would help you make economically sound judgement at any point of software development and maintenance life cycle.
</p>

]]></description>
      <pubDate>Thu Jan 28 2016 10:23:05 GMT+0900 (Tokyo Standard Time)</pubDate>
      <link>http://richard-imaoka.github.io/posts/journals-of-systems-and-software</link>
      <guid isPermaLink="true">http://richard-imaoka.github.io/posts/journals-of-systems-and-software</guid>
    </item>
    
    
    <item>
      <title>Pricing and Accounting Software - Debt</title>
      <description><![CDATA[<h2>Why the metaphor Technical "Debt" is used? Because it causes maintenance costs</h2>
<p>
  Let's review why people call software as Technical Debt.
  There is an excellent summary article, "<a href="https://medium.com/@kellan/towards-an-understanding-of-technical-debt-ae0f97cc0553#.pn7e7x4p5">Towards an understanding of technical debt</a>", which puts Technical Debt into 5 different categories:

  <ol>
    <li>Maintenance work</li>
    <li>Features of the codebase that resist change</li>
    <li>Operability choices that resist change</li>
    <li>Code choices that suck the will to live</li>
    <li>Dependencies that resist upgrading</li>
  </ol>

  Eventually, as software causes cost as such, people call it Technical Debt, something you have to <strong>pay for</strong>.

</p>

<h2>Financial Debt, you have to pay it back</h2>
<p>
  Speaking of Financial Debt, typically you have periodic payments to pay back the debt you are obligated.
  And as the time goes by, the debt amount decreases.

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting-debt-financial-debt.png">
    <figcaption><a href="http://www.freedigitalphotos.net/images/Money_g61-Stacked_US_Dollar_p66613.html">Image by sheelamohan at FreeDigitalPhotos.net</a></figcaption>
  </figure>
</p>

<p>
  Also another important property is that usually it is straightforward to derive the periodic payment amount,
  from the debt amount for Financial Debt.
  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/income-bond.png">
  </figure>
</p>


<h2>Technical Debt does not require you to pay it back</h2>
<p>
  On the other hand, Technical Debt doesn't hold the properties as discussed above for usual Financial Debt.
  As Ward Cunningham writes in "<a href="http://c2.com/cgi/wiki?WardExplainsDebtMetaphor">Ward Explains Debt Metaphor</a>",
  you don't need to pay back Technical Debt.

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting-debt-technical-debt.png">
    <figcaption><a href="http://www.freedigitalphotos.net/images/Business_people_g201-Worried_Businessman_With_Pc_p67341.html">Image by David Castillo Dominici at FreeDigitalPhotos.net</a></figcaption>
  </figure>

  If you don't pay back (i.e. clean up) Technical Debt, you need to keep paying continuous and consistent maintenance cost over time.

</p>

<h2>We need mathematical models to tie Technical Debt and Software maintenance cost</h2>
<p>
  Also another important property about Technical Debt is it is not straightforward to relate the mainteance cost amount and the Technical Debt amount.
  For example, if you incrase the number of lines if your software source code, chances are that your maintenance cost might more than double or even triple as a result.
</p>

<p>
  With the advance of today's technologies, it is becoming easier to collect and calculate software metrics, for Technical Debt.
  For example, simply the number of lines in your code, cyclomatic complexity, frequency of issues from a certain portion of the code, etc.
</p>

<p>
  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting-debt-technical-debt-model.png">
    <figcaption>
      Images by
      <a href="http://www.freedigitalphotos.net/images/Education_g314-Mathematical_Background_p86649.html">Janaka Dharmasena</a>
      and
      <a href="http://www.freedigitalphotos.net/images/Money_g61-Stacked_US_Dollar_p66613.html">sheelamohana</a>
      at FreeDigitalPhotos.net
    </figcaption>
  </figure>

  Then you need <strong>mathematical models</strong> to relate the software metrics to the maintenance cost.
  Just showing software metrics will not get you anywhere. You need to carefully review the metrics and use them to effectively manage your software maintenance cost.
</p>

</figure>
]]></description>
      <pubDate>Thu Jan 28 2016 10:23:05 GMT+0900 (Tokyo Standard Time)</pubDate>
      <link>http://richard-imaoka.github.io/posts/pricing-and-accounting-software-debt</link>
      <guid isPermaLink="true">http://richard-imaoka.github.io/posts/pricing-and-accounting-software-debt</guid>
    </item>
    
    
    <item>
      <title>Pricing and Accounting Software - Asset</title>
      <description><![CDATA[<h2>Accounting package software is easy as you know the price</h2>

<p>
  When you purchased a packaged software product, it is easy to tell the asset value of the software.
  That is just the purchase price (and if necessary, you apply <a hre="https://en.wikipedia.org/wiki/Depreciation">"depreciation"</a> accounting).
  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting-asset-package.png">
  </figure>
</p>

<h2>Accounting internally developed software ... how to price it?</h2>
<p>
  On the other hand, it becomes difficult when you try to evaluate the software you developed internally in your company.
  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting-asset-internal.png">
    <figcaption><a href="http://www.freedigitalphotos.net/images/Teamwork_g404-Standing_People_p25253.html">Image by renjith krishnan at FreeDigitalPhotos.net</a></figcaption>
  </figure>
</p>

<p>
  One possible approach is to calculate <a href="http://www.investopedia.com/terms/d/dcf.asp">"Discounted Cash Flow"</a> which is generated from your software.
  In this case, the cashflow is the revenue generated from the software.
  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting-asset-cashflow.png">
  </figure>
</p>

<p>
  However, that is not almost always impossible. As we saw in the <a href="pricing-and-accounting-software-income">previous article</a>,
  it is not your software which generates the revenue, but your entire business generates the cashflow.
  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/income-software.png">
  </figure>
</p>

<h2>Internally developed software is priced to zero !? As no one buys your software</h2>
<p>
  For almost all companies, no one else will buy your software. If anyone does, he/she buys your entire company or your entire business, rather than just software.

  That is different from other non-physical assets, like intellectual properties. If you have copyright of famous musician's songs, some investors might want to buy them.

  However, if you developed software for your own company, no matter how good it is, no one would buy it.

  So, no one buys your software ... then its price must be zero?
</p>]]></description>
      <pubDate>Thu Jan 28 2016 10:23:05 GMT+0900 (Tokyo Standard Time)</pubDate>
      <link>http://richard-imaoka.github.io/posts/pricing-and-accounting-software-asset</link>
      <guid isPermaLink="true">http://richard-imaoka.github.io/posts/pricing-and-accounting-software-asset</guid>
    </item>
    
    
    <item>
      <title>Pricing and Accounting Software - Income</title>
      <description><![CDATA[
<figure style="text-align:center">
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/income.png">
</figure>

<h2>Income from software - illustrated by the single-app E-Commerce company</h2>
<p>
  Like my previous articles, let's continue the discussion about the same single-app E-commerce company, to make the argument simple.
  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/income-e-sales.png">
  </figure>
</p>

<p>
  What kind of income does the "e-Sales" software generate? It is only the revenue from the "e-Sales" application.
  No other income, like license fee, is generated from "e-Sales".
</p>

<p>
  Then, it would feel natural and easy to associate all the revenue to "e-Sales". However...
  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/income-revenue.jpg" style="max-width:100%; height:auto">
    <figcaption><a href="http://www.freedigitalphotos.net/images/business-graph-with-dollar-sign-photo-p391087">Image by dream designs at FreeDigitalPhotos.net</a></figcaption>
  </figure></p>
</p>



<h2>Revenue is generated from the whole "business", not only from the software</h2>
<p>
  It is not really right to associate 100% of the revenue to the software. Because there are other contribution factors.
</p>

<p>
  For example, if we are talking about financial assets like coupon bonds, it is very clear coupon income is purely generated from the bond.
</p>

<figure style="text-align:center">
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/income-bond.png" style="max-width:100%; height:auto">
</figure></p>

<p>
  However, for software, you need hardware running the software application, people supporting the software, etc.
  In  other words, the entire <strong>"business"</strong> including the software generates the "e-Sales" revenue, not the software only.
</p>

<figure style="text-align:center">
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/income-software.png" style="max-width:100%; height:auto">
</figure></p>

<p>
  Then is it just meaningless to think about "how much revenue does the software generate"?
  Well, it is still very important, especially when you think about <strong>change in revenue</strong>, created from software enhancement, replacement, retirement.
  Or even if running legacy software application without any change, you might see change in the revenue.
</p>

<p>
  We'll explore more about revenue change and software relationship in future articles.
</p>
]]></description>
      <pubDate>Thu Jan 28 2016 10:23:05 GMT+0900 (Tokyo Standard Time)</pubDate>
      <link>http://richard-imaoka.github.io/posts/pricing-and-accounting-software-income</link>
      <guid isPermaLink="true">http://richard-imaoka.github.io/posts/pricing-and-accounting-software-income</guid>
    </item>
    
    
    <item>
      <title>Pricing and Accounting Software - Expenses, Time-Tracking with RescueTime</title>
      <description><![CDATA[<h2>RescueTime tracks your time usage by application, and web site</h2>

<p>
  <a href="https://www.rescuetime.com/">RescueTime</a> is a cloud-based application,
  which tracks your time usage. From its website, it works as follows:

  <blockquote>
    <ul>
      <li>Runs securely in the background on your computer and mobile devices.</li>
      <li>Tracks time spent on applications and websites, giving you an accurate picture of your day.</li>
      <li>Gives you detailed reports and data based on your activity.</li>
    </ul>
  </blockquote>

  So, the detailed report looks like this.

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/rescuetime-3.png">
  </figure>

</p>

<p>
  To track the time usage, RescueTime desktop process automatically starts when you start your PC.
  Then, when you move "focus" to (mouse click on) any application, then it tracks the time spent on the application,
  until you move focus to another application.

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/rescuetime-1.png">
  </figure>

  For web browsers, RescueTime can give more detailed tracking, by each web page.

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/rescuetime-2.png">
  </figure>

  The collected time usage data is sent to RescueTime's cloud, and aggregated to show the report like shown at the top of this article.
</p>

<h2>RescueTime is very useful, but analysis from different aspects needed</h2>
<p>
  RescueTime, as it is not intended for software maintenance cost calculation (so it's not a complaint for RescueTime at all), there are challenges.
</p>

<p>
  For example, if you use Text Editor to write code for your application, maybe "e-Sales", the time is recorded for Text Editor.

  However, in such a case, you actually want the time recorded for e-Sales, not Text Editor.

  (i.e.) RescueTime keeps track of applications you <strong>use</strong>, but you want to keep track of applications you <strong>support.</strong>
</p>

<p>
  To more accurately calculate your software's maintenance cost,
  you would also other differnet kinds of software metrics and develop your own cost calculation models based on various metrics.

  We'll explore the possibilities of leveraging such metrics in later blog posts.
</p>
]]></description>
      <pubDate>Thu Jan 28 2016 10:23:05 GMT+0900 (Tokyo Standard Time)</pubDate>
      <link>http://richard-imaoka.github.io/posts/pricing-and-accounting-software-expenses-rescuetime</link>
      <guid isPermaLink="true">http://richard-imaoka.github.io/posts/pricing-and-accounting-software-expenses-rescuetime</guid>
    </item>
    
    
    <item>
      <title>Pricing and Accounting Software - Expenses, Time-Tracking for Maintenance Cost Calculation</title>
      <description><![CDATA[<h2>Expenses is mainly maintenance cost of your software</h2>
<p>
  As previously discussed in earlier posts, I split software into the four components as below.
  In this article, I'll explain the bottom left component in the below picture, how to calculate the expenses of your software.

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting-expense.png">
  </figure>
</p>

<h2>Example: Single-Application E-commerce company</h2>
<p>
  In the real world, calculating software maintenance cost is pretty complicated.

  A lot of people with different roles might use the same software, including developers, DevOps people, designers, etc.
  Also there could be hardware and electricity costs associated the software.
</p>

<p>
  To avoid complexity, I use a very simple setup here to illustrate how it works.

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting-expense-esale1.png">
  </figure>

  Let's assume there is an E-commerce company whose business is solely run on their single web software application, "e-Sales".
  And then let's also assume there are 3 developers supporting the e-Sales software. They maintain and enhance the e-Sales.
</p>

<p>
  If we could somehow measure the percentage of their time usage, and time usage by each developer can be like this.
  For the rest of the time other than e-Sales support, they might be e-maling, attending meetings, etc.

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting-expense-esale2.png">
  </figure>
</p>

<p>
  What's the salary of each developer monthly? that could be like below, then the monthly maintenance cost of the e-sales software is:

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting-expense-esale3.png">
  </figure>
</p>

<p style="text-align: center; font-size: 14px;">
  $3,800 x 30% + $3,500 x 50% + $4,000 x 45% <br>
  = $4,690 / Month
</p>

<p>
  Good, with this simple formula, and (a lof of) assumptions, we could show the monthly maintenance cost of the e-Sales software.
</p>

<h2>Tracking time usage is possible?</h2>
<p>
  Again, in real-life situations, it doesn't go like this simple.

  <ul>
    <li>More than a single team of people might be supporting e-Sales</li>
    <li>Joe, Katie and Alice might be supporting other applications than e-Sales</li>
    <li>Most problematic issue is - <strong>time usage analysis is pretty difficult</strong></li>
  </ul>

</p>

<p>
  So is it just impossible to calculate software maintenance cost? I think the answer is that, it is impossible to give 100% accurate analytics, however,
  the advance of current technologies like <a href="https://www.rescuetime.com/">Rescue Time</a> enabled, or at least would enable in near future, to keep track of time usage in an acceptable accuracy.

  <a href="https://www.rescuetime.com/">Rescue Time</a> is a very interesting technology we want to introduce more in the next article.
</p>
]]></description>
      <pubDate>Thu Jan 28 2016 10:23:05 GMT+0900 (Tokyo Standard Time)</pubDate>
      <link>http://richard-imaoka.github.io/posts/pricing-and-accounting-software-expenses-time-tracking</link>
      <guid isPermaLink="true">http://richard-imaoka.github.io/posts/pricing-and-accounting-software-expenses-time-tracking</guid>
    </item>
    
    
    <item>
      <title>Pricing and Accounting Software - Expenses</title>
      <description><![CDATA[<h2>Expenses is mainly maintenance cost of your software</h2>
<p>
  As previously discussed in earlier posts, I split software into the four components as below.
  In this article, I'll explain the bottom left component in the below picture, how to calculate the expenses of your software.

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting-expense.png">
  </figure>
</p>

<h2>Example: Single-Application E-commerce company</h2>
<p>
  In the real world, calculating software maintenance cost is pretty complicated.

  A lot of people with different roles might use the same software, including developers, DevOps people, designers, etc.
  Also there could be hardware and electricity costs associated the software.
</p>

<p>
  To avoid complexity, I use a very simple setup here to illustrate how it works.

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting-expense-esale1.png">
  </figure>

  Let's assume there is an E-commerce company whose business is solely run on their single web software application, "e-Sales".
  And then let's also assume there are 3 developers supporting the e-Sales software. They maintain and enhance the e-Sales.
</p>

<p>
  If we could somehow measure the percentage of their time usage, and time usage by each developer can be like this.
  For the rest of the time other than e-Sales support, they might be e-maling, attending meetings, etc.

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting-expense-esale2.png">
  </figure>
</p>

<p>
  What's the salary of each developer monthly? that could be like below, then the monthly maintenance cost of the e-sales software is:

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting-expense-esale3.png">
  </figure>
</p>

<p style="text-align: center; font-size: 14px;">
  $3,800 x 30% + $3,500 x 50% + $4,000 x 45% <br>
  = $4,690 / Month
</p>

<p>
  Good, with this simple formula, and (a lof of) assumptions, we could show the monthly maintenance cost of the e-Sales software.
</p>

<h2>Tracking time usage is possible?</h2>
<p>
  Again, in real-life situations, it doesn't go like this simple.

  <ul>
    <li>More than a single team of people might be supporting e-Sales</li>
    <li>Joe, Katie and Alice might be supporting other applications than e-Sales</li>
    <li>Most problematic issue is - <strong>time usage analysis is pretty difficult</strong></li>
  </ul>

</p>

<p>
  So is it just impossible to calculate software maintenance cost? I think the answer is that, it is impossible to give 100% accurate analytics, however,
  the advance of current technologies like <a href="https://www.rescuetime.com/">Rescue Time</a> enabled, or at least would enable in near future, to keep track of time usage in an acceptable accuracy.

  <a href="https://www.rescuetime.com/">Rescue Time</a> is a very interesting technology we want to introduce more in the next article.
</p>
]]></description>
      <pubDate>Thu Jan 28 2016 10:23:05 GMT+0900 (Tokyo Standard Time)</pubDate>
      <link>http://richard-imaoka.github.io/posts/pricing-and-accounting-software-expenses</link>
      <guid isPermaLink="true">http://richard-imaoka.github.io/posts/pricing-and-accounting-software-expenses</guid>
    </item>
    
    
    <item>
      <title>Refactoring Software is Explained in Financial Accounting Context</title>
      <description><![CDATA[<p>
  The previous post, <a href="enhancement-and-technical-debt">Software Enhancement is Explained in Financial Accounting Context</a>,
  showed how software enhancement can be explained from a Financial Accounting perspective.
</p>

<h2>Good refactoring only reduces Technical Debt</h2>
<p>
  Refactoring is an activity to clean up your code, and make it easier to maintain.
  As <a href="http://martinfowler.com/books/refactoring.html">Martin Fowler said</a>,
  it is to preserve the original behavior of the software, but still make it better designed.

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/refactoring1.png">
  </figure>

  So, essentially the Technical Debt will be reduced without having to reduce software's value.

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/refactoring2.png" style="max-width:100%; height:auto;;">
  </figure>

  As the Technical Debt was decreased, the software becomes easier to maintain, less error prone, and the mainteance cost will be saved.
</p>

<h2>Bad refactoring actually increases Technical Debt</h2>
<p>
  So far a happy scenario, but what happens when you do bad refactoring?

  For example, you introduced unexpected bugs, or you chose wrong design or implementation so that it actually becomes difficult to maintain and change the code going forward.

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/refactoring3.png">
  </figure>

  In such a case, total Technical Debt of the software is increased,

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/refactoring4.png">
  </figure>

  And thus the maintenance cost is also increased. It is analogous to increase in Financial Debt causing increase in debt charge too.
  You will see loss from this refactoring activity.
</p>

<h2>Bad Refactoring should be reverted immediately</h2>
<p>
  So, what to do, when you did bad refactoring? You revert it back!

  Unfortunately, in practice, it is sometimes found that previous refactoring had unexpected bad impact, and you need to revert the refactoring.
</p>

<p>
  The best practice in refactoring is to do it in very small steps. If you do large scale refactoring, and the problems are realized later, it gets much harder to revert to the original state.

  So, if you cannot revert the refactoring, your software will operate in an inferior quality - more maintenance cost than before.

</p>
]]></description>
      <pubDate>Thu Jan 28 2016 10:23:05 GMT+0900 (Tokyo Standard Time)</pubDate>
      <link>http://richard-imaoka.github.io/posts/refactoring-and-technical-debt</link>
      <guid isPermaLink="true">http://richard-imaoka.github.io/posts/refactoring-and-technical-debt</guid>
    </item>
    
    
    <item>
      <title>Software Enhancement is Explained in Financial Accounting Context</title>
      <description><![CDATA[<h2>Review of Software and Technical Debt in Financial Accounting</h2>

<p>
  The previous post, <a href="technical-debt-from-a-single-line">Single Line of Source Code is still Technical Debt</a>"
  explained how to treat software and technical debt in terms of Financial Accounting.

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting5.1.png">
  </figure>

  In this article, let me try explaining how enhancement (e.g. adding a new feature to software) affects this balance.
</p>

<h2>Good Enhancement gives you more benefit than increased maintenance cost</h2>
<p>
  Software enhancement is made for benefits, but that's only one side of the story.

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting8.png">
  </figure>

  When making an enhancement, you are most likely adding new lines of code. And as in the previous post, any single line of code is Technical Debt.

  Thus, you cannot avoid <strong>increased Technical Debt</strong> and resulting <strong>maintenance cost increase.</strong>
</p>

<p>
  It is similar, in a Financial Debt context, to a situation where you borrow more money, and the increased debt amount result in an increased debt charge to pay.
</p>

<p>
  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting9.png">
  </figure>

  However, making enhancement also increases the value of your software, as it performs better or supports more features.
  So, as long as you see more benefit than maintenance cost, the enhancement is good one.
</p>

<h2>Bad Enhancement increased maintenance cost more than its benefit</h2>
<p>
  On the other hand, if you do a bad enhancement, you will increase the Technical Debt a lot more. Typically you add buggy code and that causes a lot of troubles afterwards.

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting10.png">
  </figure>

  In such a case, you need to pay more maintenance cost and the benefit from the enhancement is diminished.

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting11.png">
  </figure>
</p>

<h2>Cost vs. Benefit analysis is crucial for enhancement</h2>
<p>
  In environments where users are very close to the development team, the development team tends to respond to the users quickly for their enhancement requests.

  The users are happy, and the development team gets credits, however, they are only looking at one side of the enhancement - increased benefit.
</p>

<p>
  As illustrated above, you always add more technical debt when making an enhancement. So developers (or in certain cases, product managers) need to be very serious about
  the requested feature really gives benefits they want to provide.
</p>

<p>
  Otherwise, the increased Technical Debt, thus increased maintenance cost will byte developers' legs at some point and they can no longer respond to their users' new requests quickly.
</p>]]></description>
      <pubDate>Thu Jan 28 2016 10:23:05 GMT+0900 (Tokyo Standard Time)</pubDate>
      <link>http://richard-imaoka.github.io/posts/enhancement-and-technical-debt</link>
      <guid isPermaLink="true">http://richard-imaoka.github.io/posts/enhancement-and-technical-debt</guid>
    </item>
    
    
    <item>
      <title>Single Line of Source Code is still Technical Debt</title>
      <description><![CDATA[<h2>Accounting of Financial Debt</h2>

<p>
  Disclaimer - the pictures used in this post are not as strict and accurate as the U.S. and most other countries' accounting standars require, but still serve as illustration of basic concepts.

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting1.png">
    <figcaption>Figure 1. Asset (Cash) and Liability (Debt) are balanced</figcaption>
  </figure>

  Firstly, when you borrow, (e.g.) $1,000 from someone, you get $1,000 cash on the asset side, and $1,000 on the debt side in your accounting.

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting2.png">
    <figcaption>Figure 1. You pay back $100 of the debt</figcaption>
  </figure>

  Afterwards, you pay back part of the debt, $100.

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting3.png">
    <figcaption>Figure 3. Charge for the debt</figcaption>
  </figure>

  However, you don't pay back only $100, because you need to pay the charge of the debt. So, if the charge is $50, you lose this $50.

  Of course, if you borrow $1,000, you don't just save it in your account. You borrowed the money to invest in something else, hopefully earning more than the charge of the debt.

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting4.png">
    <figcaption>Figure 4. You borrowed cash for investment</figcaption>
  </figure>

  Talking about debt in accounting, and finance, there is one important thing to note -

</p>

<h2>Debt itself is not a bad thing, nor is it good</h2>

<p>
  Usually people are afraid of debt, and believe that:

  <ul>
    <li>No debt is ideal, keep it minimal</li>
    <li>You should pay back debt as early as possible</li>
  </ul>

  <strong>This is wrong mindset.</strong> why?

  As in this article, debt allows you increase your asset, which you can invest in something else.

  If you always need to "buy" your assets, you need to wait until your profit piles up to make the investment.
  That will significantly slow down your business.

<p>
  Of course, more debt means more charge to pay, but if you also have enough income to cover the charge, that is ok.
  So, don't blindly assume debt is bad, but the bad thing is <strong>broken balance </strong> between the charge from Debt, and your income.
</p>


<h2>Accounting of Software, from the debt metaphor</h2>

<p>
  You can look at <a href="http://c2.com/cgi/wiki?WardExplainsDebtMetaphor">"Ward (Cunningham) Explains Debt Metaphor"</a> to see why and how software is referred as debt.

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting5.png">
    <figcaption>Figure 5. As long as you have software, there is always Technical Debt</figcaption>
  </figure>

  Like in Finance, you pile up Technical Debt to create or purchase software asset.

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting6.png" style="max-width:100%; height:autox;">
    <figcaption>Figure 6. Technical Debt causes maintenance cost</figcaption>
  </figure>

  Technical debt causes cost in maintenance. as financial debt causes debt charge. One interesting thing about Technical Debt is you might end up only paying maintenance cost, without paying back the debt.

  <figure style="text-align:center">
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/accounting7.png">
    <figcaption>Figure 7. Software generates benefit, that is why it can be accounted as an asset</figcaption>
  </figure>

  Also, software can be accounted as an asset, as that is expected to give you certain benefits. Benefits range from driving revenue (e.g. if your software is running your e-commerce site) or reducing cost by automating human tasks.

</p>

<h2>Technical Debt is not bad itself - single line of code is still Technical Debt</h2>
<p>
  When talking about this "Technical Debt" metaphor, people usually think Technical Debt = Bad Code/ Software, but drives you into a <strong>wrong mindset</strong>.
</p>

<p>
  Any <strong>single line of code</strong> is Technical Debt, rather than just bad code.
</p>

<p>
  If you treat only bad code as Technical Debt, you tend to think it's something you need to pay back ASAP. That can hurt your business - as long as your Technical Debt is well balanced (i.e.) software's benefit covers its maintenance cost well, you don't need to pay back the Technical Debt.
</p>
  Like financial debt, Technical Debt is not a bad thing as long as it is <strong>well balanced</strong> against the benefits the software gives you.
</p>

<p>
  So, the important thing is again the <strong>balance</strong>. If your Technical Debt gets larger and larger, and at a certain point its maintenance cost exceeds its benefit, you start suffering.
</p>]]></description>
      <pubDate>Thu Jan 28 2016 10:23:05 GMT+0900 (Tokyo Standard Time)</pubDate>
      <link>http://richard-imaoka.github.io/posts/technical-debt-from-a-single-line</link>
      <guid isPermaLink="true">http://richard-imaoka.github.io/posts/technical-debt-from-a-single-line</guid>
    </item>
    
    
    <item>
      <title>Review of 'Stochastic Cost Estimation and Risk Analysis in Managing Software Projects' paper</title>
      <description><![CDATA[<p style="text-align: center">
  <a href="http://aut.researchgateway.ac.nz/handle/10292/1591">"Stochastic cost estimation and risk analysis in managing software projects"</a>
</p>

<p>You can dowload the paper from the above link.</p>

<h2>Monte Carlo Simulation in Finance</h2>

<p>
  Monte Carlo is a typical simulation technique for a random process,
  In Financial Engineering, it is commonly used to calculate the price of an asset, especially complicated derivative assets.
</p>

<p>
  Very briefly, it works as:
  <ul>
    <li>You model a random price movement of an asset (model means a Mathematical equation to describe the movement)</li>
    <li>Run a simulation and then you see  a random price movement path</li>
    <li>Repeat the simulation multiple times (1,000, 10,000, or 100,000 ... dependent on the problem)</li>
    <li>See the resulting probability distribution, and take the average</li>
  </ul>
</p>

<figure style="text-align:center">
  <a title="By Sc1171 (Own work) [CC BY-SA 4.0 (http://creativecommons.org/licenses/by-sa/4.0)], via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File%3AMonte_carlo_simulation.png">
    <img style="max-width: 512px; width: 100%;" alt="Monte carlo simulation" src="https://upload.wikimedia.org/wikipedia/commons/a/a7/Monte_carlo_simulation.png"/>
  </a>
  <figcaption>By Sc1171 (Own work) [(<a href="http://creativecommons.org/licenses/by-sa/4.0">CC BY-SA 4.0</a>)], via Wikimedia Commons</figcaption>
</figure>

<p>
  Using Monte Carlo for a simple model like stock price doesn't make much sense, but <strong>Monte Carlo</strong> is a powerful tool for <strong>pricing complicated derivative</strong> assets,
  where the pricing model is too complicated to derive an answer (i.e. the price) mathematically.
  If you cannot solve the price mathematically, then Monte Carlo allows you to still price the derivative asset with a large number of simulations.
</p>

<h2>Monte Carlo in Software Engineering</h2>

<p>So, how this paper used the Monte Carlo technique to estimate the software project risk? Firstly, it split a software project into multiple phases</p>

<p>
  <ul>
    <li><strong>Planning and Bid Preparation</strong></li>
    <li><strong>Requirements Definition</strong></li>
    <li><strong>Analysis and Design</strong></li>
    <li><strong>Code and Debug</strong></li>
    <li><strong>Integrate and Test</strong></li>
    <li><strong>Deployment and Acceptance</strong></li>
  </ul>
</p>

<p>
  Each phase of this is modeled as a random process (i.e.) it has a range of possible completion dates.
  And each phase is modeled as a different a different random (e.g. different standard deviation, etc).
</p>

<p>The below is a figure from the paper, showing the results of 5,000 Monte Carlo simulations of the entire project.</p>

<figure style="text-align:center">
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/monte-carlo.png">
</figure>

<h2>What are the benefits, and challenges?</h2>

<h3>Benefits</h3>

<p>The paper provided a basic, but a powerful and standard framework to see how the possible project completion date distribution would look like. It is very similar to derivative pricing with Monte Carlo in Finance.</p>

<p>Over time, you can tweak the model for each project phase, comparing the simulation with past-completed projects, and the models would be expected to be more accurate.</p>

<h3>Challenges</h3>

<p>There could be problems though, since it weighs historical data to predict the possible future project completion. If new technologies are introduced and they completely change the game, which is typical, historical projects do not predict future projects well.</p>

<p>Also this paper is based on Water-fall like project style. Maybe Agile projects need a bit different modeling.</p>

<p>However, this is still an informative paper providing probabilistic view on software project management.</p>
]]></description>
      <pubDate>Thu Jan 28 2016 10:23:05 GMT+0900 (Tokyo Standard Time)</pubDate>
      <link>http://richard-imaoka.github.io/posts/review-stochastic-cost-estimation-monte-carlo</link>
      <guid isPermaLink="true">http://richard-imaoka.github.io/posts/review-stochastic-cost-estimation-monte-carlo</guid>
    </item>
    
    
    <item>
      <title>Risk means Uncertainty in Financial Engineering, so does in Software Projects</title>
      <description><![CDATA[<h2>You can never tell when your Software Project will be finished</h2>

<figure style="text-align:center">
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/ID-10098216.jpg">
  <figcaption><a href="http://www.freedigitalphotos.net/images/Ideas_and_decision_m_g409-Figure_With_Red_Question_Mark_p98216.html">Image by Master isolated images at FreeDigitalPhotos.net</a></figcaption>
</figure>

<p>The below looks very <strong>obvious</strong>, and maybe even stupid, but it's the <strong>first step</strong> to understand what "risk" means in software projects.</p>

<p>Typically in a software  project, toward the end of the project, requirements get clearer, people get detailed ideas about implementation, and there are less tasks to do. So, of course, it gets easier to predict when the project is completed, as the project gets closer to completion.</p>

<p>In contrast, predicting the project completion is hard at the beginning. Unexpected issues arise as the project goes on</p>

<p>Sounds too obvious? But that yields into the following definition...</p>

<h2>High risk project, as highly uncertain completion date, not a long project</h2>

<p>Even though two projects can have the same planned completion date, one might have more predictable completion than the other.</p>

<p>For example, you may be using legacy and well-known technologies in one of the projects, and you can give more accurate estimate on project's completion. The other project might involve newer technologies you are not familiar with. In such a case, the former project has less risk. The latter has more risk.</p>

<figure style="text-align:center">
  <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/risk.png">
</figure>

<p>So, a riskier project <strong>doesn't necessarily</strong> mean a longer project. If project's completion is <strong>less predictable</strong>, the project is <strong>riskier</strong>.</p>

<p>Of course, generally as a project gets longer and larger, its completion date is more difficult to predict though.</p>

<h2>Risk in Financial Engineering is not a bad thing</h2>

<p>I chose the above definition of software project's risk, to match the meaning of risk in Financial Engineering.</p>

<p>In Financial Engineering, a <strong>risk is not a bad thing</strong>. Actually, it doesn't mean anything good or bad. It's just uncertainty about the price of an asset.</p>

<p>For example, you don't know Facebook's stock price tomorrow. So that means Facebook's stock price has a risk. (i.e.) uncertainty.</p>

<p>If Facebook's stock never ever changes its value, you have no risk but you cannot get any return from investing in Facebook.</p>

<p>So, if you want a return from your investment, in other words, if you <strong>expect upside</strong>, you need to <strong>accept potential downside</strong> as the price of Facebook goes up or down, either way.</p>

<p>That's why I said a risk is not bad - whenever you expect return from investment, there is a risk.</p>

<h2>Importance of risk management in software projects</h2>

<p>Financial Engineering admits you can never accurately predict any asset's price in the future, but still it allows you <strong>manage risks</strong>.</p>

<p>The key to manage risks is <strong>quantifying</strong> them, describing them in mathematical forms. Mathematics don't need to be complicated, but need to be simple and robust enough.</p>

<p>Like in Financial Engineering, if you expect return from projects, you need to accept risks. The converse is also true. If you take a risk, you must be expecting a return (otherwise, what's the reason of you taking the risk!?) </p>

<p>I'll describe how the Financial Engineering frameworks can be applied in the field of software project management, in other articles in this series..</p>


]]></description>
      <pubDate>Thu Jan 28 2016 10:23:05 GMT+0900 (Tokyo Standard Time)</pubDate>
      <link>http://richard-imaoka.github.io/posts/uncertainty-as-risk-in-software-project</link>
      <guid isPermaLink="true">http://richard-imaoka.github.io/posts/uncertainty-as-risk-in-software-project</guid>
    </item>
    
    
    <item>
      <title>Financial Engineering of Software Projects</title>
      <description><![CDATA[<p>Yet there is a question the software industry has not provided right ways to answer...</p>

<h2>Do you want to invest in this software project?</h2>

<div style="text-align:center">
  <figure>
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/ID-10056727.jpg">
    <figcaption><a href="http://www.freedigitalphotos.net/images/Business_people_g201-Employee_Reading_Documents_p56727.html">Image by Stuart Miles at FreeDigitalPhotos.net</a></figcaption>
  </figure>
</div>

<p>This is still a very subjective question. People usually depend on experienced programmers or project managers to give estimate on how long a project takes, and it often turns out to be <strong>wrong</strong>.</p>

<p>In a series of blog articles, I am going to build <strong>scientific</strong> and <strong>quantitative</strong> methodologies to answer to the above question, leveraging frameworks developed in financial engineering.</p>

<h2>The software industry has focused on <strong>"how"</strong> to build software better</h2>

<p>
  There has been an uncountable number of software development methodologies people have come up with, and tried.
  ( You can see some of these in <a href="https://en.wikipedia.org/wiki/Software_development_process">"Software development process" in Wikipedia</a> ).
</p>

<p>
  Project management styles like:

  <ul>
      <li>Waterfall method</li>
      <li>Agile methodologies</li>
  </ul>

  Programming styles as:

  <ul>
    <li>Object Oriented Programming</li>
    <li>Functional Programming</li>
  </ul>

  or testing styles like:

  <ul>
    <li>Test Driven Development</li>
    <li>Behavior Driven Development</li>
  </ul>

  Also application architectures:

  <ul>
    <li>Monolithic architecture</li>
    <li>Micro Services</li>
  </ul>

  There is a lot more different methodologies in many different aspects of software development.
</p>

<p>
  Lessons, best practices were learnt and shared within the industry, and nowadays people use very sophisticated ways in developing their software, however...
</p>

<h2><strong>"Whether"</strong> to invest in a software project ... ?</h2>

<p>We don't know the answer to the question yet.</p>

<p>Yes, it's still crucial to be familiar with software development methodologies and technologies like above, for a successful project.</p>

<p>However, no matter how good you are as a programmer, or as a project manager, still software development takes longer than people would usually expect, and stakeholders are upset by delay or even failure of project delivery.</p>

<p>
  So you want to know... :
  <ul style="color: #ff0000; font-size: 1.5em;">
    <li><strong>How long does the project take?</strong></li>
    <li><strong>How much cost does it incur?</strong></li>
  </ul>
  but how can we tell?
</p>

<h2>Uncertainty, which financial engineering has dealt with in its long history</h2>

<div style="text-align:center">
  <figure>
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/questions.jpg">
    <figcaption><a href="http://www.freedigitalphotos.net/images/question-mark-on-cubes-shows-uncertainty-photo-p175169">Image by Stuart Miles at FreeDigitalPhotos.net</a></figcaption>
  </figure>
</div>

<p>We  need to admit it is <strong>impossible</strong> to know exactly when a project is finished, at the beginning.</p>

<p>You are deliberately facing <strong>uncertainty</strong> in project planning, since software development is doing something new in most cases.</p>

<p>
  So,
  <ul>
    <li>Don't rely on, or keep relying on a single number which you estimated at the beginning</li>
    <li>Rather, think in a "range" of possible outcomes (e.g. project delivery date) given uncertainty</li>
  </ul>
  Illustration of this concept is as follows:
</p>

<div style="text-align:center">
  <figure>
    <img src="http://res.cloudinary.com/dlze0abrr/image/upload/v1453650265/blog/images/posts/uncertainty.png">
    <figcaption><a href="http://www.freedigitalphotos.net/images/Business_people_g201-Employee_Reading_Documents_p56727.html">Image by Stuart Miles at FreeDigitalPhotos.net</a></figcaption>
  </figure>
</div>

<p>
  Financial engineering frameworks have a long history of dealing with uncertainty, and provided ways to still make decisions even though you cannot accurately estimate the outcome.
  Let's enter in the frameworks and in the field from the next article in the series.
</p>
]]></description>
      <pubDate>Thu Jan 28 2016 10:23:05 GMT+0900 (Tokyo Standard Time)</pubDate>
      <link>http://richard-imaoka.github.io/posts/financial-engineering-in-software-projects</link>
      <guid isPermaLink="true">http://richard-imaoka.github.io/posts/financial-engineering-in-software-projects</guid>
    </item>
    
    
    <item>
      <title>About Richard Imaoka</title>
      <description><![CDATA[<p>
  Richard Imaoka is a professional programmer living in far east Asia, and also an amateur quant.
</p>


]]></description>
      <pubDate>Thu Jan 28 2016 10:23:05 GMT+0900 (Tokyo Standard Time)</pubDate>
      <link>http://richard-imaoka.github.io/posts/about</link>
      <guid isPermaLink="true">http://richard-imaoka.github.io/posts/about</guid>
    </item>
    
  </channel>
</rss>